<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="OEETime" Id="{beadfc8e-62d0-4bfb-b41c-9c0fa8237088}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK OEETime
VAR_INPUT
	ENI					: BOOL;
	CurrentTime			: DT;
	dt_State			: stMachineState;
	stsMachine			: STRING(31);
END_VAR
VAR_OUTPUT 
	UpTime				: TIME;
END_VAR
VAR_IN_OUT PERSISTENT
	dt_OEE				: sOEETime;
END_VAR
VAR PERSISTENT
	StartedDate			: DATE;
	StartedShift		: UINT;
	dt_TimeCal			: ShiftTime;
	Sts_DailyShiftEnd	: BOOL;
	SaveData			: BOOL;
	bGetData			: BOOL;
	i					: INT;
	j					: INT;
	k					: INT;
	l					: INT;
	m					: INT;
	SeqCal				: INT;
	TimeCal				: TON;
	bTrig				: R_TRIG;
	ShiftDuration		: ARRAY [0..2] OF REAL;
	tUpTime				: TIME;
	Duration			: REAL;
	Time1				: TOD;
	Time2				: TOD;
END_VAR

VAR
	plaintext: INT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[```plaintext
// Mendapatkan waktu saat ini dan mengonversinya ke tanggal dan waktu
dt_OEE.DateCurrent := DT_TO_DATE(CurrentTime); // Mengubah waktu saat ini menjadi tanggal
dt_OEE.TimeCurrent := DT_TO_TOD(CurrentTime); // Mengubah waktu saat ini menjadi waktu hari ini

// Mengatur waktu awal dan akhir dari setiap shift
dt_OEE.TimeShift[1].StartShift := TOD#06:00:00; // Shift 1 dimulai pada pukul 06:00:00
dt_OEE.TimeShift[2].StartShift := TOD#14:00:00; // Shift 2 dimulai pada pukul 14:00:00
dt_OEE.TimeShift[3].StartShift := TOD#22:00:00; // Shift 3 dimulai pada pukul 22:00:00

dt_OEE.TimeShift[1].EndShift := TOD#14:00:00; // Shift 1 berakhir pada pukul 14:00:00
dt_OEE.TimeShift[2].EndShift := TOD#22:00:00; // Shift 2 berakhir pada pukul 22:00:00
dt_OEE.TimeShift[3].EndShift := TOD#06:00:00; // Shift 3 berakhir pada pukul 06:00:00

// Akumulasi Waktu
CASE SeqCal OF
	0:
		// Menghitung waktu berdasarkan interval waktu tertentu
		TimeCal(IN:=TRUE, PT:=T#990MS); // Timer dimulai dengan interval 990ms
		IF TimeCal.Q THEN // Jika timer mencapai PT (preset time), melakukan operasi berikut
			tUpTime := tUpTime + T#1S; // Menambahkan waktu uptime sebesar 1 detik
			IF dt_State.Running OR stsMachine = 'Running' THEN // Jika mesin berjalan
				dt_TimeCal.Running := dt_TimeCal.Running + T#1S; // Menambahkan waktu berjalan
				SeqCal := 1; // Pindah ke langkah berikutnya
			ELSIF dt_State.Error OR dt_State.Aborted OR stsMachine = 'Error' OR stsMachine = 'Aborted' THEN // Jika terjadi kesalahan atau mesin dihentikan
				dt_TimeCal.Error := dt_TimeCal.Error + T#1S; // Menambahkan waktu kesalahan
				SeqCal := 1; // Pindah ke langkah berikutnya
			ELSE // Jika tidak dalam kondisi berjalan atau error
				dt_TimeCal.Stopped := dt_TimeCal.Stopped + T#1S; // Menambahkan waktu berhenti
				SeqCal := 1; // Pindah ke langkah berikutnya
			END_IF;
		END_IF;
	1:
		TimeCal(IN:=FALSE); // Mematikan timer
		SeqCal := 0; // Kembali ke langkah awal
END_CASE;

// Mengatur waktu aktif
Uptime := tUpTime;

// Mereset variabel saat terjadi pergantian shift atau reset
bTrig(CLK := bGetData); // Trigger saat terjadi pergantian shift atau reset
IF bTrig.Q OR dt_OEE.Reset THEN // Jika terjadi trigger atau reset
	dt_TimeCal.Running := T#0s; // Mereset waktu berjalan
	dt_TimeCal.Error := T#0S; // Mereset waktu kesalahan
	dt_TimeCal.Stopped := T#0s; // Mereset waktu berhenti
END_IF;

// Menentukan apakah saat ini merupakan waktu untuk mengambil data berdasarkan waktu akhir shift
IF ((dt_OEE.TimeCurrent > dt_OEE.TimeShift[1].EndShift) AND (dt_OEE.TimeCurrent < dt_OEE.TimeShift[1].EndShift + T#3S)) OR
   ((dt_OEE.TimeCurrent > dt_OEE.TimeShift[2].EndShift) AND (dt_OEE.TimeCurrent < dt_OEE.TimeShift[2].EndShift + T#3S)) OR
   ((dt_OEE.TimeCurrent > dt_OEE.TimeShift[3].EndShift) AND (dt_OEE.TimeCurrent < dt_OEE.TimeShift[3].EndShift + T#3S)) THEN
    IF NOT bGetData THEN // Jika belum mengambil data
         bGetData := TRUE; // Set untuk mengambil data
         StartedDate := dt_OEE.DateCurrent; // Simpan tanggal saat memulai pengambilan data
         StartedShift := dt_OEE.CurrentShift; // Simpan shift saat memulai pengambilan data
    END_IF;
ELSE
     bGetData := FALSE; // Jika tidak memenuhi kondisi di atas, set untuk tidak mengambil data
END_IF;

(**Shift Checking**)
IF NOT SaveData THEN
    IF (dt_OEE.TimeCurrent > dt_OEE.TimeShift[1].StartShift) AND (dt_OEE.TimeCurrent < dt_OEE.TimeShift[1].EndShift) THEN
         dt_OEE.CurrentShift := 1; // Tetapkan shift saat ini menjadi 1 jika berada di antara waktu awal dan akhir shift 1
    ELSIF (dt_OEE.TimeCurrent > dt_OEE.TimeShift[2].StartShift) AND (dt_OEE.TimeCurrent < dt_OEE.TimeShift[2].EndShift) THEN
         dt_OEE.CurrentShift := 2; // Tetapkan shift saat ini menjadi 2 jika berada di antara waktu awal dan akhir shift 2
    ELSIF (dt_OEE.TimeCurrent > dt_OEE.TimeShift[3].StartShift) OR (dt_OEE.TimeCurrent < dt_OEE.TimeShift[3].EndShift) THEN
         dt_OEE.CurrentShift := 3; // Tetapkan shift saat ini menjadi 3 jika berada di antara waktu awal dan akhir shift 3
    END_IF;
END_IF;

(** Function to Clear Data Record **)
(*IF dt_OEE.Reset THEN
     StartedDate :=  dt_OEE.DateCurrent;
    FOR  l := 1 TO 6 BY 1 DO
        FOR  m := 0 TO 2 BY 1 DO
             dt_OEE.RecordDate[ l] :=  StartedDate;
             dt_OEE.RecordTime[ l,  m].Running   	:= T#0s;
			 dt_OEE.RecordTime[ l,  m].Stopped   	:= T#0s;
			 dt_OEE.RecordTime[ l,  m

].Error   		:= T#0s;
             
        END_FOR;
    END_FOR;
        
END_IF;*)

(** Function to copy daily information to history AND Reset Timer**)
IF ((dt_OEE.TimeCurrent > dt_OEE.TimeShift[3].EndShift) AND (dt_OEE.TimeCurrent < (dt_OEE.TimeShift[3].EndShift + T#3S))) AND NOT Sts_DailyShiftEnd THEN
     SaveData := TRUE; // Set untuk menyimpan data harian
    FOR i := 5 TO 0 BY -1 DO
        FOR j := 0 TO 2 BY 1 DO
             dt_OEE.RecordDate[i + 1] := dt_OEE.RecordDate[i]; // Salin tanggal rekaman keesokan harinya
             dt_OEE.RecordTime[i + 1, j].Running := dt_OEE.RecordTime[i, j].Running; // Salin waktu berjalan keesokan harinya
             dt_OEE.RecordTime[i + 1, j].Stopped := dt_OEE.RecordTime[i, j].Stopped; // Salin waktu berhenti keesokan harinya
             dt_OEE.RecordTime[i + 1, j].Error := dt_OEE.RecordTime[i, j].Error; // Salin waktu kesalahan keesokan harinya
        END_FOR;
    END_FOR;
    
    FOR k := 0 TO 2 BY 1 DO
        dt_OEE.RecordTime[0, k].Running := T#0S; // Reset waktu berjalan
        dt_OEE.RecordTime[0, k].Stopped := T#0S; // Reset waktu berhenti
		dt_OEE.RecordTime[0, k].Error := T#0S; // Reset waktu kesalahan
        
        dt_OEE.RecordDate[0] := StartedDate; // Set tanggal rekaman ke hari saat ini
        Sts_DailyShiftEnd := TRUE; // Set status akhir shift harian
    END_FOR;
ELSE
     SaveData := FALSE; // Jika tidak memenuhi kondisi di atas, set untuk tidak menyimpan data
END_IF;

IF dt_OEE.CurrentShift <> 1 THEN
     Sts_DailyShiftEnd := FALSE; // Jika shift saat ini bukan 1, set status akhir shift harian menjadi salah
END_IF;

(**Writting Data to Current Shift**)
CASE dt_OEE.CurrentShift OF
    1:
         dt_OEE.RecordDate[0] := StartedDate; // Set tanggal rekaman shift saat ini
         dt_OEE.RecordTime[0, 0].Running := dt_TimeCal.Running; // Set waktu berjalan pada shift saat ini
         dt_OEE.RecordTime[0, 0].Stopped := dt_TimeCal.Stopped; // Set waktu berhenti pada shift saat ini
         dt_OEE.RecordTime[0, 0].Error := dt_TimeCal.Error; // Set waktu kesalahan pada shift saat ini
    2:
         dt_OEE.RecordDate[0] := StartedDate; // Set tanggal rekaman shift saat ini
         dt_OEE.RecordTime[0, 1].Running := dt_TimeCal.Running; // Set waktu berjalan pada shift saat ini
         dt_OEE.RecordTime[0, 1].Stopped := dt_TimeCal.Stopped; // Set waktu berhenti pada shift saat ini
         dt_OEE.RecordTime[0, 1].Error := dt_TimeCal.Error; // Set waktu kesalahan pada shift saat ini
    3:
         dt_OEE.RecordDate[0] := StartedDate; // Set tanggal rekaman shift saat ini
         dt_OEE.RecordTime[0, 2].Running := dt_TimeCal.Running; // Set waktu berjalan pada shift saat ini
         dt_OEE.RecordTime[0, 2].Stopped := dt_TimeCal.Stopped; // Set waktu berhenti pada shift saat ini
         dt_OEE.RecordTime[0, 2].Error := dt_TimeCal.Error; // Set waktu kesalahan pada shift saat ini
END_CASE;

// Menentukan data untuk ditampilkan pada HMI berdasarkan shift sebelumnya
dt_OEE.HMI_Date := dt_OEE.RecordDate[dt_OEE.HMI_NumberPrev]; // Menampilkan tanggal pada HMI
dt_OEE.HMI_Time[0] := dt_OEE.RecordTime[dt_OEE.HMI_NumberPrev, 0]; // Menampilkan waktu berjalan pada HMI
dt_OEE.HMI_Time[1] := dt_OEE.RecordTime[dt_OEE.HMI_NumberPrev, 1]; // Menampilkan waktu berhenti pada HMI
dt_OEE.HMI_Time[2] := dt_OEE.RecordTime[dt_OEE.HMI_NumberPrev, 2]; // Menampilkan waktu kesalahan pada HMI

// Menghitung total waktu berjalan, waktu berhenti, dan waktu kesalahan untuk keseluruhan shift
dt_OEE.TotalTime.Running := dt_OEE.HMI_Time[0].Running + dt_OEE.HMI_Time[1].Running + dt_OEE.HMI_Time[2].Running; // Total waktu berjalan
dt_OEE.TotalTime.Stopped := dt_OEE.HMI_Time[0].Stopped + dt_OEE.HMI_Time[1].Stopped + dt_OEE.HMI_Time[2].Stopped; // Total waktu berhenti
dt_OEE.TotalTime.Error := dt_OEE.HMI_Time[0].Error + dt_OEE.HMI_Time[1].Error + dt_OEE.HMI_Time[2].Error; // Total waktu kesalahan

// Menghitung durasi shift yang telah berjalan
IF dt_OEE.CurrentShift = 1 AND dt_OEE.HMI_NumberPrev = 0 THEN
	ShiftDuration[0] := TIME_TO_REAL(dt_OEE.TimeCurrent - dt_OEE.TimeShift[1].StartShift); // Durasi shift 1
ELSE
	ShiftDuration[0] := TIME_TO_REAL(T#8H); // Jika tidak dalam kondisi tersebut, durasi shift 1 diatur ke 8 jam
END_IF

IF dt_OEE.CurrentShift = 2 AND dt_OEE.HMI_NumberPrev = 0 THEN
	ShiftDuration[1] := TIME_TO_REAL(dt_OEE.TimeCurrent - dt_OEE.TimeShift[2].StartShift); // Durasi shift 2
ELSE
	ShiftDuration[1] := TIME_TO_REAL(T#8H); // Jika tidak dalam kondisi tersebut, durasi shift 2 diatur ke 8 jam
END_IF
 
IF dt_OEE.CurrentShift = 3 AND dt_OEE.HMI_NumberPrev = 0 THEN
	IF dt_OEE.TimeCurrent < dt_OEE.TimeShift[3].EndShift THEN
		ShiftDuration[2] := TOD_TO_REAL(dt_OEE.TimeCurrent + T#2H); // Durasi shift 3
	ELSE
		ShiftDuration[2] := TIME_TO_REAL(dt_OEE.TimeCurrent - dt_OEE.TimeShift[3].StartShift); // Durasi shift 3
	END_IF


ELSE
	ShiftDuration[2] := TIME_TO_REAL(T#8H); // Jika tidak dalam kondisi tersebut, durasi shift 3 diatur ke 8 jam
END_IF

// Menghitung persentase waktu berjalan, waktu berhenti, dan waktu kesalahan untuk setiap shift
dt_OEE.Precentage[0].Running := (TIME_TO_REAL(dt_OEE.HMI_Time[0].Running) / ShiftDuration[0]) * 100; // Persentase waktu berjalan pada shift 1
dt_OEE.Precentage[0].Stopped := (TIME_TO_REAL(dt_OEE.HMI_Time[0].Stopped) / ShiftDuration[0]) * 100; // Persentase waktu berhenti pada shift 1
dt_OEE.Precentage[0].Error := (TIME_TO_REAL(dt_OEE.HMI_Time[0].Error) / ShiftDuration[0]) * 100; // Persentase waktu kesalahan pada shift 1

dt_OEE.Precentage[1].Running := (TIME_TO_REAL(dt_OEE.HMI_Time[1].Running) / ShiftDuration[1]) * 100; // Persentase waktu berjalan pada shift 2
dt_OEE.Precentage[1].Stopped := (TIME_TO_REAL(dt_OEE.HMI_Time[1].Stopped) / ShiftDuration[1]) * 100; // Persentase waktu berhenti pada shift 2
dt_OEE.Precentage[1].Error := (TIME_TO_REAL(dt_OEE.HMI_Time[1].Error) / ShiftDuration[1]) * 100; // Persentase waktu kesalahan pada shift 2

dt_OEE.Precentage[2].Running := (TIME_TO_REAL(dt_OEE.HMI_Time[2].Running) / ShiftDuration[2]) * 100; // Persentase waktu berjalan pada shift 3
dt_OEE.Precentage[2].Stopped := (TIME_TO_REAL(dt_OEE.HMI_Time[2].Stopped) / ShiftDuration[2]) * 100; // Persentase waktu berhenti pada shift 3
dt_OEE.Precentage[2].Error := (TIME_TO_REAL(dt_OEE.HMI_Time[2].Error) / ShiftDuration[2]) * 100; // Persentase waktu kesalahan pada shift 3

// Mengonversi waktu menjadi string untuk ditampilkan di HMI
dt_OEE.HMI_Time[0].sRunning := ConvertTimeToString(dt_OEE.HMI_Time[0].Running); // Waktu berjalan pada shift 1
dt_OEE.HMI_Time[0].sStopped := ConvertTimeToString(dt_OEE.HMI_Time[0].Stopped); // Waktu berhenti pada shift 1
dt_OEE.HMI_Time[0].sError := ConvertTimeToString(dt_OEE.HMI_Time[0].Error); // Waktu kesalahan pada shift 1

dt_OEE.HMI_Time[1].sRunning := ConvertTimeToString(dt_OEE.HMI_Time[1].Running); // Waktu berjalan pada shift 2
dt_OEE.HMI_Time[1].sStopped := ConvertTimeToString(dt_OEE.HMI_Time[1].Stopped); // Waktu berhenti pada shift 2
dt_OEE.HMI_Time[1].sError := ConvertTimeToString(dt_OEE.HMI_Time[1].Error); // Waktu kesalahan pada shift 2

dt_OEE.HMI_Time[2].sRunning := ConvertTimeToString(dt_OEE.HMI_Time[2].Running); // Waktu berjalan pada shift 3
dt_OEE.HMI_Time[2].sStopped := ConvertTimeToString(dt_OEE.HMI_Time[2].Stopped); // Waktu berhenti pada shift 3
dt_OEE.HMI_Time[2].sError := ConvertTimeToString(dt_OEE.HMI_Time[2].Error); // Waktu kesalahan pada shift 3

IF dt_OEE.HMI_NumberPrev < 0 THEN
	dt_OEE.HMI_NumberPrev := 6; // Jika shift sebelumnya kurang dari 0, atur ke 6 (shift terakhir)
ELSIF dt_OEE.HMI_NumberPrev > 6 THEN
	dt_OEE.HMI_NumberPrev := 0; // Jika shift sebelumnya lebih dari 6, atur ke 0 (shift pertama)
END_IF;
]]></ST>
    </Implementation>
    <LineIds Name="OEETime">
      <LineId Id="346" Count="202" />
      <LineId Id="94" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>